<?php

use Drupal\settings_tray_translations\Block\BlockEntitySettingTrayForm;
use Drupal\block\Entity\Block;

/**
 * Implements hook_entity_type_build().
 */
function settings_tray_translations_entity_type_build(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['block']
    ->setFormClass('settings_tray', BlockEntitySettingTrayForm::class);
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function settings_tray_translations_contextual_links_view_alter(&$element, $items) {
  if (isset($element['#links']['settings-trayblock-configure'])) {
    $current_lang = Drupal::languageManager()->getCurrentLanguage();
    /** @var \Drupal\Core\Url $url */
    $url = $element['#links']['settings-trayblock-configure']['url'];
    $query = $url->getOption('query');
    $query['config_lang'] = $current_lang->getId();
    $url->setOption('query', $query);
    $element['#links']['settings-trayblock-configure']['options']['query']['config_lang'] = $current_lang->getId();
  }
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function settings_tray_translations_preprocess_block(&$variables) {
  if (empty($variables['attributes']['data-drupal-settingstray'])) {
    // If this block is not marked as editable do all the same checks as
    // settings_tray_translations_preprocess_block() except for
    // _settings_tray_has_block_overrides().
    // @see settings_tray_translations_preprocess_block().
    $access_checker = \Drupal::service('access_check.settings_tray.block.settings_tray_form');
    /** @var \Drupal\Core\Block\BlockManagerInterface $block_plugin_manager */
    $block_plugin_manager = \Drupal::service('plugin.manager.block');
    /** @var \Drupal\Core\Block\BlockPluginInterface $block_plugin */
    $block_plugin = $block_plugin_manager->createInstance($variables['plugin_id']);
    if (isset($variables['elements']['#contextual_links']['block']['route_parameters']['block'])) {
      $block = Block::load($variables['elements']['#contextual_links']['block']['route_parameters']['block']);
      if ($access_checker->accessBlockPlugin($block_plugin)->isAllowed()) {
        // Add class and attributes to all blocks to allow Javascript to target.
        $variables['attributes']['class'][] = 'settings-tray-editable';
        $variables['attributes']['data-drupal-settingstray'] = 'editable';
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function settings_tray_translations_module_implements_alter(&$implementations, $hook) {
  if (in_array($hook,  ['entity_type_build', 'contextual_links_view_alter', 'preprocess_block'])) {
    // Ensure that our hooks are invoked after Settings Tray's implementations.
    $group = $implementations['settings_tray_translations'];
    unset($implementations['settings_tray_translations']);
    $implementations['settings_tray_translations'] = $group;
  }
}